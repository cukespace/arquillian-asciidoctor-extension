package com.github.cukespace.arquillian.asciidoctor;

/**
 * Created by pestano on 03/09/16.
 */

import org.apache.commons.io.IOUtils;
import org.jboss.arquillian.config.descriptor.api.ArquillianDescriptor;
import org.jboss.arquillian.config.descriptor.api.ContainerDef;
import org.jboss.arquillian.config.descriptor.impl.ArquillianDescriptorImpl;
import org.jboss.arquillian.container.spi.Container;
import org.jboss.arquillian.container.spi.client.container.DeployableContainer;
import org.jboss.arquillian.core.api.annotation.ApplicationScoped;
import org.jboss.arquillian.core.api.event.ManagerStarted;
import org.jboss.arquillian.core.api.event.ManagerStopping;
import org.jboss.arquillian.core.spi.ServiceLoader;
import org.jboss.arquillian.core.test.AbstractManagerTestBase;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.runners.MockitoJUnitRunner;

import java.io.*;
import java.util.List;

import static java.lang.System.lineSeparator;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.when;


@RunWith(MockitoJUnitRunner.class)
@Ignore
public class AdocExtensionTest extends AbstractManagerTestBase {

    @Mock
    private ServiceLoader serviceLoader;

    @Mock
    private Container container;

    @SuppressWarnings("rawtypes")
    @Mock
    private DeployableContainer deployableContainer;

    @Mock
    private ContainerDef containerDef;

    @Spy
    private AsciidoctorObserver asciidoctorObserver;


    private static File theFile = new File("target/adoc/test.adoc");



    @BeforeClass
    public static void setUp() throws IOException {
        theFile.getParentFile().mkdirs();
        try (final Writer writer = new FileWriter(theFile)) {
            writer.write("= test\n\nSome adoc");
        }
    }

    @AfterClass
    public static void tearDown() {
        if (theFile.exists()) {
            theFile.delete();
        }
    }


    @Override
    protected void addExtensions(List<Class<?>> extensions) {
        extensions.add(AsciidoctorExtension.class);
        super.addExtensions(extensions);
    }

    @Before
    public void setup(){
        when(container.getDeployableContainer()).thenReturn(deployableContainer);
        when(container.getContainerConfiguration()).thenReturn(containerDef);
        bind(ApplicationScoped.class, AsciidoctorObserver.class, asciidoctorObserver);
    }

    @Test
    public void shouldRenderHtmlFileInAdocRenderedDirectory() throws Exception {
        ArquillianDescriptor arquillianDescriptor = new ArquillianDescriptorImpl("asciidoctor").
                extension("asciidoctor-test").
                property("sourceDirectory","target/adoc").
                property("outputDirectory","target/adoc").
                property("backend","html");

        doReturn(arquillianDescriptor).when(asciidoctorObserver).getDescriptorInstance();

        fire(new ManagerStarted());

        fire(new ManagerStopping());


        final File out = new File("target/adoc/test.adoc");//added in @Before
        assertTrue(out.isFile());

        //generated by the extension
        final File rendered = new File("target/adoc-rendered");
        assertTrue(rendered.isDirectory());


        final File renderedTestHtml = new File("target/adoc-rendered/test.html");
        assertTrue(renderedTestHtml.isFile());
        try (final InputStream is = new FileInputStream(renderedTestHtml)) {
            assertEquals(
                    "<div class=\"paragraph\">\n" +
                            "<p>Some adoc</p>\n" +
                            "</div>", IOUtils.toString(is, "UTF-8").replace(lineSeparator(), "\n"));
        }

        final File renderedTestPdf = new File("target/adoc-rendered/test.pdf");
        assertTrue(renderedTestPdf.isFile());
        assertTrue(renderedTestPdf.length() > 10 * 1024 /*we have some content */);
    }


}
