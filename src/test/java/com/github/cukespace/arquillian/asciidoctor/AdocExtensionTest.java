package com.github.cukespace.arquillian.asciidoctor;

import static java.lang.System.lineSeparator;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.util.List;

import org.apache.commons.io.IOUtils;
import org.jboss.arquillian.core.api.event.ManagerStopping;
import org.jboss.arquillian.core.spi.ServiceLoader;
import org.jboss.arquillian.core.test.AbstractManagerTestBase;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
@Ignore
public class AdocExtensionTest extends AbstractManagerTestBase {
    
    @Mock
    private ServiceLoader serviceLoader;
    
    private static File theFile = new File("target/adoc/test.adoc");
    
    
    @BeforeClass
    public static void setUp() throws IOException{
        theFile.getParentFile().mkdirs();
        try (final Writer writer = new FileWriter(theFile)) {
            writer.write("= test\n\nSome adoc");
        }
    }
    
    @AfterClass
    public static void tearDown(){
        if(theFile.exists()){
            theFile.delete();
        }
    }
    
    

    @Override
    protected void addExtensions(List<Class<?>> extensions) {
        extensions.add(AsciidoctorExtension.class);
        super.addExtensions(extensions);
    }
    
    /*@Override
    protected void addContexts(List<Class<? extends Context>> contexts)
    {
       super.addContexts(contexts);
       contexts.add(SuiteContextImpl.class);
       contexts.add(ClassContextImpl.class);
       contexts.add(TestContextImpl.class);
    }
    
    @Override
    protected void startContexts(Manager manager)
    {
       super.startContexts(manager);
       manager.getContext(SuiteContext.class).activate();
       manager.getContext(ClassContext.class).activate(super.getClass());
       manager.getContext(TestContext.class).activate(this);
    }   */
    
    
    @Test
    public void shouldFireEvent() throws Exception{
        fire(new ManagerStopping());
        
        
        final File out = new File("target/adoc/test.adoc");//added in @Before
        assertTrue(out.isFile());

        //generated by the extension
        final File rendered = new File("target/adoc-rendered");
        assertTrue(rendered.isDirectory());

        
        final File renderedTestHtml = new File("target/adoc-rendered/test.html");
        assertTrue(renderedTestHtml.isFile());
        try (final InputStream is = new FileInputStream(renderedTestHtml)) {
            assertEquals(
                    "<div class=\"paragraph\">\n" +
                    "<p>Some adoc</p>\n" +
                    "</div>", IOUtils.toString(is, "UTF-8").replace(lineSeparator(), "\n"));
        }

        final File renderedTestPdf = new File("target/adoc-rendered/test.pdf");
        assertTrue(renderedTestPdf.isFile());
        assertTrue(renderedTestPdf.length() > 10 * 1024 /*we have some content */);
    }
    
    

}
